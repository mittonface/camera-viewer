events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;

    # Upstream for the Go application
    upstream camera_viewer {
        server camera-viewer:8080;
    }

    # HTTP server - serves content and Let's Encrypt challenges
    server {
        listen 80;
        server_name camera.mittn.ca;

        # Let's Encrypt challenge location
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Client max body size for uploads
        client_max_body_size 10M;

        # Rate limiting
        limit_req zone=api burst=20 nodelay;

        # Proxy settings
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;

        # Proxy timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Check if SSL certificates exist, redirect to HTTPS if they do
        location / {
            # If SSL certificates exist, redirect to HTTPS
            if (-f /etc/letsencrypt/live/camera.mittn.ca/fullchain.pem) {
                return 301 https://$server_name$request_uri;
            }
            
            # Otherwise serve over HTTP
            proxy_pass http://camera_viewer;
        }

        # Health check endpoint (bypass rate limiting and HTTPS redirect)
        location /health {
            proxy_pass http://camera_viewer;
        }
    }
}